#!/usr/bin/env python3

import sys
import os
import time
import argparse
import hashlib
from colorama import Fore, Style
from cryptography.fernet import Fernet
import qrcode
import secrets
import base64

FERNETKEY = b'-3WsfLYsZ8DFgrdVV9xhmCh-ftABZffQJaYPc0zKKV0='

def check_hexa_dec(value):
    if not isinstance(value, str) or not all(c in "0123456789abcdef" for c in value.lower()):
        raise argparse.ArgumentTypeError(f"{value} is not a valid hexadecimal string.")
    if len(value) < 64:
        raise argparse.ArgumentTypeError(f"{value} must contain at least 64 characters.")
    return value

def check_keypath(value):
    if not isinstance(value, str):
        raise argparse.ArgumentTypeError("Path must be a string")
    expected_name = "ft_otp.key"
    basename = os.path.basename(value)
    if basename != expected_name:
        raise argparse.ArgumentTypeError(f"Filename must be '{expected_name}'")
    if not os.path.isfile(value):
        raise argparse.ArgumentTypeError(f"'{value}' is not a valid file")
    if not os.access(value, os.R_OK):
        raise argparse.ArgumentTypeError(f"No read permission for '{value}'")
    return value
    
def check_hexpath(value):
    if not isinstance(value, str):
        raise argparse.ArgumentTypeError("Path must be a string")
    expected_name = "key.hex"
    basename = os.path.basename(value)
    if basename != expected_name:
        raise argparse.ArgumentTypeError(f"Filename must be '{expected_name}'")
    if not os.path.isfile(value):
        raise argparse.ArgumentTypeError(f"'{value}' is not a valid file")
    if not os.access(value, os.R_OK):
        raise argparse.ArgumentTypeError(f"No read permission for '{value}'")
    return value

def read_from_file(filepath):
    try:
        if filepath.endswith('.key'):
            with open(filepath, 'rb') as file:
                return file.read()
        else:
            with open(filepath, 'r') as file:
                return file.read().strip()
    except IOError as e:
        print(f"{Fore.RED}Error reading file: {e}{Style.RESET_ALL}", file=sys.stderr)
        sys.exit(1)

def write_key_file(content: bytes):
    try:
        with open('ft_otp.key', 'wb') as file:
            file.write(content)
    except PermissionError:
        print(f"{Fore.RED}Error: Permission denied writing to ft_otp.key{Style.RESET_ALL}", file=sys.stderr)
        sys.exit(1)
    except IOError as e:
        print(f"{Fore.RED}Error writing file: {e}{Style.RESET_ALL}", file=sys.stderr)
        sys.exit(1)

def encrypt_fernet(message: str, key: bytes) -> bytes:
    f = Fernet(key)
    return f.encrypt(message.encode())

def decrypt_fernet(encrypted_message: bytes, key: bytes) -> str:
    f = Fernet(key)
    return f.decrypt(encrypted_message).decode()

def hmac_sha1(key, message):
    # Block size for the HMAC algorithm (specific to SHA-1, which uses a 64-byte block size).
    block_size = 64

    # Adjust the key to the required block size:
    # If the key is longer than the block size, hash it using SHA-1 to reduce it to 20 bytes.
    # This ensures compatibility and avoids potential security risks from directly truncating the key.
    if len(key) > block_size:
        key = hashlib.sha1(key).digest()

    # Pad the key with zero bytes to make it exactly 64 bytes long if it is shorter.
    # This is necessary for the XOR operations in the next steps.
    key = key.ljust(block_size, b'\x00')

    # Compute the inner padding (ipad) by XORing the key with the constant 0x36.
    # This prepares the key for the first stage of hashing.
    ipad = bytes((x ^ 0x36) for x in key)

    # Perform the first stage of hashing:
    # Concatenate the inner padding (ipad) with the message, then hash it using SHA-1.
    inner_hash = hashlib.sha1(ipad + message).digest()

    # Compute the outer padding (opad) by XORing the key with the constant 0x5C.
    # This prepares the key for the second stage of hashing.
    opad = bytes((x ^ 0x5C) for x in key)

    # Perform the second stage of hashing:
    # Concatenate the outer padding (opad) with the result of the inner hash, then hash it using SHA-1.
    hmac_result = hashlib.sha1(opad + inner_hash).digest()

    # Dynamic truncation:
    # Use the last nibble (4 bits) of the final HMAC result to determine an offset.
    # This offset selects the starting point for extracting 4 bytes from the HMAC result.
    offset = hmac_result[-1] & 0xf

    # Extract 4 bytes from the HMAC result starting at the calculated offset.
    dbc = hmac_result[offset:offset+4]

    # Convert the extracted 4 bytes into a 31-bit integer (positive by masking with 0x7FFFFFFF).
    binary = int.from_bytes(dbc, 'big') & 0x7fffffff

    # Calculate the 6-digit OTP by taking the integer modulo 1,000,000.
    # The result is formatted as a zero-padded string to ensure it is exactly 6 digits.
    return format(binary % 1000000, '06d')

def generate_qr_code(data: str):
    qr = qrcode.QRCode()
    qr.add_data(data)
    qr.make(fit=True)
    return qr

def generate_hex_key(length=64):
    return secrets.token_hex(length // 2)

def hex_to_base32(hex_key):
    key_bytes = bytes.fromhex(hex_key)
    return base64.b32encode(key_bytes).decode('utf-8')

def main():
    try:
        parser = argparse.ArgumentParser(
            description="FT_OTP: Generates one-time passwords (TOTP/HOTP)."
        )
        parser.add_argument(
            "-g",
            type=check_hexpath,
            help="Path to key.hex, which content should be Hexadecimal key, which is saved in ft_otp.key file."
        )
        parser.add_argument(
            "-k",
            type=check_keypath,
            help="Path to ft_otp.key, for generating OTPs.",
        )
        parser.add_argument(
            "-s",
            action="store_true",
            help="Generate a new 64-character hexadecimal key and save it in ft_otp.key."
        )

        args = parser.parse_args()

        if sum(bool(x) for x in [args.g, args.k, args.s]) != 1:
            print(f"{Fore.RED}Error: Exactly one of the options -g, -k, or -s must be given.{Style.RESET_ALL}", file=sys.stderr)
            sys.exit(1)

        if args.g:
            hexacode = read_from_file(args.g)
            if check_hexa_dec(hexacode):
                write_key_file(encrypt_fernet(hexacode, FERNETKEY))
                print(f"{Fore.GREEN}Key was successfully saved in ft_otp.key{Style.RESET_ALL}")
        elif args.k:
            encrypted_key = read_from_file(args.k)
            decrypted_key = decrypt_fernet(encrypted_key, FERNETKEY)
            
            key_bytes = bytes.fromhex(decrypted_key)
            
            # Generate a counter value based on the current time:
            # TOTP uses the Unix timestamp divided by 30-second intervals to calculate the counter.
            # This ensures that the OTP changes every 30 seconds.
            counter = int(time.time()) // 30

            # Convert the counter value to an 8-byte big-endian representation:
            # HMAC requires the counter as a binary value, and it must be 8 bytes long.
            # Big-endian format ensures that the most significant byte comes first.
            counter_bytes = counter.to_bytes(8, 'big')

            # Generate the OTP:
            # Use the HMAC-SHA1 function with the secret key (key_bytes) and the counter (counter_bytes).
            # The result is a 6-digit time-based one-time password.
            otp = hmac_sha1(key_bytes, counter_bytes)
            print(f"{Fore.YELLOW}{otp}{Style.RESET_ALL}")
        elif args.s:
            new_key = generate_hex_key()
            write_key_file(encrypt_fernet(new_key, FERNETKEY))
            print(f"{Fore.GREEN}New key generated and saved in ft_otp.key{Style.RESET_ALL}")

            base32_key = hex_to_base32(new_key)
            qr_data = f"otpauth://totp/ft_otp:?secret={base32_key}&issuer=ft_otp"
            print(f"{Fore.CYAN}Here is your QR Code for the Authenticator app:{Style.RESET_ALL}")
            qr = generate_qr_code(qr_data)
            qr.print_ascii()
        else:
            print(f"{Fore.RED}Error: Either option -g -k or -s has to be given.{Style.RESET_ALL}", file=sys.stderr)
            sys.exit(1)
    except Exception as e:
        print(f'Error: {e}')
        sys.exit(1)

if __name__ == "__main__":
    main()
